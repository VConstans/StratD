module StratD
{

	struct Ressource
	{
		string type;
		long nb;
	};


	struct Transaction
	{
		long long timeStamp;
		long emetteur;
		long recepteur;
		Ressource ressource;
		boolean vole;
		boolean penalise;
	};


	interface Producteur
	{
		boolean demandeRessource(in Ressource r);
		Ressource sondeProd();
		void annonce();
		oneway void lancementProduction();
		void donneTour();
	};


	typedef sequence<Producteur> tabProducteur;
	typedef sequence<string> tabRessource;
	typedef sequence<Ressource> tabBesoin;


	interface Joueur
	{
		typedef sequence<Joueur> tabJoueur;

		void rcvParametreJeu(in tabJoueur joueur, in tabProducteur prod, in tabRessource ressource, in tabBesoin besoin, in boolean RbR);
		void ajoutObservateur(in Joueur j);
		void suppObservateur(in Joueur j);
		oneway void gameLoop();
		void donneTour();
		long estVole(in Ressource r);
		void observe(in long idProd, in Ressource r);
	};


	interface Coordinateur
	{
		long ajoutJoueur(in Joueur j, in boolean RbR);
		long ajoutProd(in Producteur p,in boolean RbR, in string ressourceType);
		void ping(in long id);
		void finTour();
		void finJoueur(in long id);
	};

};
